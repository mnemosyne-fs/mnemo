// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	authentication "github.com/mnemosynefs/mnemo/internal/authentication"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// CheckAuth provides a mock function with given fields: username, password
func (_m *Database) CheckAuth(username string, password string) bool {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for CheckAuth")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckSessionTime provides a mock function with given fields: session_token
func (_m *Database) CheckSessionTime(session_token string) bool {
	ret := _m.Called(session_token)

	if len(ret) == 0 {
		panic("no return value specified for CheckSessionTime")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(session_token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CheckUserExists provides a mock function with given fields: username
func (_m *Database) CheckUserExists(username string) bool {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateAuthDatabase provides a mock function with given fields: file
func (_m *Database) CreateAuthDatabase(file string) (*authentication.AuthDatabase, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthDatabase")
	}

	var r0 *authentication.AuthDatabase
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*authentication.AuthDatabase, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(string) *authentication.AuthDatabase); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authentication.AuthDatabase)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSessionToken provides a mock function with given fields: username
func (_m *Database) CreateSessionToken(username string) string {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for CreateSessionToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CreateUser provides a mock function with given fields: username
func (_m *Database) CreateUser(username string) error {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateNewSessionToken provides a mock function with given fields: username
func (_m *Database) GenerateNewSessionToken(username string) (string, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNewSessionToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionToken provides a mock function with given fields: username
func (_m *Database) GetSessionToken(username string) (string, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFromToken provides a mock function with given fields: session_token
func (_m *Database) GetUserFromToken(session_token string) (string, error) {
	ret := _m.Called(session_token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFromToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(session_token)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(session_token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(session_token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAuthDatabase provides a mock function with given fields: file
func (_m *Database) LoadAuthDatabase(file string) (*authentication.AuthDatabase, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for LoadAuthDatabase")
	}

	var r0 *authentication.AuthDatabase
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*authentication.AuthDatabase, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(string) *authentication.AuthDatabase); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authentication.AuthDatabase)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: username, password
func (_m *Database) LoginUser(username string, password string) (string, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: username
func (_m *Database) RemoveUser(username string) error {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with no fields
func (_m *Database) Save() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFileOperations provides a mock function with given fields: newOps
func (_m *Database) SetFileOperations(newOps authentication.FileInterface) {
	_m.Called(newOps)
}

// UpdateSession provides a mock function with given fields: session_token, recently_accessed
func (_m *Database) UpdateSession(session_token string, recently_accessed bool) error {
	ret := _m.Called(session_token, recently_accessed)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(session_token, recently_accessed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: session_token
func (_m *Database) ValidateToken(session_token string) bool {
	ret := _m.Called(session_token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(session_token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
